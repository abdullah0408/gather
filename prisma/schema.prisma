// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(cuid())
  clerkId   String  @unique
  firstName String?
  lastName  String?
  username  String  @unique
  email     String  @unique

  avatarUrl String?
  bio       String?

  posts      Post[]
  followers  Follow[]   @relation("Followers")
  followings Follow[]   @relation("Followings")
  likes      Like[]
  bookmarks  Bookmark[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  follower    User   @relation("Followings", fields: [followerId], references: [clerkId], onDelete: Cascade)
  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [clerkId], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id          String     @id @default(cuid())
  content     String
  userId      String
  user        User       @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  attachments Media[]
  likes       Like[]
  bookmarks   Bookmark[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

model Media {
  id        String    @id @default(cuid())
  postId    String?
  post      Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  type      MediaType
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("post_media")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Like {
  userId String
  user   User   @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Bookmark {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}
